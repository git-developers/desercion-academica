<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CoreBundle\Services\ListHasTree\BuildInterface\ListHasTreeInterface;
use CoreBundle\Entity\Template;


/**
 * TemplateHasModuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TemplateHasModuleRepository extends EntityRepository implements ListHasTreeInterface
{

    public function findAll($limit = null, $offset = null)
    {
        return $this->findBy(['isActive' => 1], ['idIncrement' => 'DESC'], $limit, $offset);
    }

    public function findOneByPath($path)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT hasEntity
            FROM CoreBundle:TemplateHasModule hasEntity
            WHERE
            hasEntity.isActive = :active AND
            hasEntity.isParent = :active AND
            hasEntity.path = :path
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('path', $path);

        return $query->getOneOrNullResult();
    }

    public function findAllByParent($parent)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT hasEntity
            FROM CoreBundle:TemplateHasModule hasEntity
            WHERE
            hasEntity.isActive = :active AND
            hasEntity.templateHasModule = :parent
            ORDER BY hasEntity.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('parent', $parent);

        return $query->getResult();
    }

    public function findActiveTemplateByPath($path)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT 
            hasEntity.idIncrement AS template_has_module, 
            hasEntity.templateName AS template_name, 
            template.idIncrement AS template_id,
            template.code AS code
            FROM CoreBundle:TemplateHasModule hasEntity
            INNER JOIN hasEntity.template template
            WHERE
            hasEntity.path = :path AND
            
            hasEntity.isActive = :active AND
            template.isActive = :active AND
            template.isActiveTemplate = :active 
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('path', $path);

//        hasEntity.isParent = :active AND

        return $query->getOneOrNullResult();
//        return $query->getScalarResult();
//        return $query->getSingleResult();
    }

    public function findActiveTemplateById($templateId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT hasEntity, template
            FROM CoreBundle:TemplateHasModule hasEntity
            INNER JOIN hasEntity.template template
            WHERE
            hasEntity.isActive = :active AND
            template.isActive = :active AND
            template.isActiveTemplate = :active AND
            template.idIncrement = :templateId
            ";

        $query = $em->createQuery($dql);
        $query->setMaxResults(1);
        $query->setParameter('active', 1);
        $query->setParameter('templateId', $templateId);

        return $query->getOneOrNullResult();
    }

    public function findOneByParagraphAndPath($template, $path)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT paragraph.paragraph
            FROM CoreBundle:TemplateHasModule hasEntity
            INNER JOIN CoreBundle:TemplateEParagraph paragraph 
            WHERE
            hasEntity.isActive = :active AND
            hasEntity.template = :template AND
            hasEntity.path = :path AND 
            paragraph.templateHasModule = hasEntity.idIncrement
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('template', $template);
        $query->setParameter('path', $path);

        return $query->getOneOrNullResult();
//        return $query->getSingleScalarResult();
    }

    public function findOneByItemsAndPath($template, $path, $maxResults = 4)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT item
            FROM CoreBundle:TemplateHasModule hasEntity
            INNER JOIN CoreBundle:TemplateEItem item 
            WHERE
            hasEntity.isActive = :active AND
            hasEntity.template = :template AND
            hasEntity.path = :path AND 
            item.templateHasModule = hasEntity.idIncrement
            ORDER BY item.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setMaxResults($maxResults);
        $query->setParameter('active', 1);
        $query->setParameter('template', $template);
        $query->setParameter('path', $path);

        return $query->getResult();
    }

    public function findBoxleftHasBoxrightParent($boxLeftId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT hasEntity, template
            FROM CoreBundle:TemplateHasModule hasEntity
            INNER JOIN hasEntity.template template
            INNER JOIN hasEntity.module module_
            WHERE
            template.idIncrement = :id AND
            template.isActive = :active AND 
            hasEntity.isActive = :active AND 
            hasEntity.isParent = :active AND
            module_.isActive = :active  
            ORDER BY template.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $boxLeftId);

        return $query->getResult();
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT template
            FROM CoreBundle:TemplateHasModule template
            WHERE
            template.idIncrement = :id AND
            template.status = :status
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function findAllObjects()
    {
        return $this->createQueryBuilder('a')
            ->where('a.isActive = :active')
            ->orderBy('a.idIncrement', 'DESC')
            ->setParameter('active', true)
            ;
    }

    public function search($q, $maxResults = null, $firstResult = null)
    {
        // TODO: Implement search() method.
    }

    public function findBoxleftHasBoxright($boxLeftId)
    {
        // TODO: Implement findBoxleftHasBoxright() method.
    }
}
