<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CoreBundle\Services\BoxOneToManyAssoc\BuildInterface\BoxOneToManyAssocInterface;

/**
 * PointOfSaleHasProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointOfSaleHasProductRepository extends EntityRepository implements BoxOneToManyAssocInterface
{

    public function findAssociatedEntity($boxLeftId, $boxRightId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT hasEntity
            FROM CoreBundle:PointOfSaleHasProduct hasEntity
            INNER JOIN hasEntity.pointOfSale pointOfSale
            INNER JOIN hasEntity.product product
            WHERE
            pointOfSale.idIncrement = :boxLeftId AND
            product.idIncrement = :boxRightId AND
            pointOfSale.isActive = :active AND
            product.isActive = :active 
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('boxLeftId', $boxLeftId);
        $query->setParameter('boxRightId', $boxRightId);

        return $query->getOneOrNullResult();
    }

    public function findBoxRightIdsByBoxLeftValue($boxLeftId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT product.idIncrement
            FROM CoreBundle:PointOfSaleHasProduct hasEntity
            INNER JOIN hasEntity.pointOfSale pointOfSale
            INNER JOIN hasEntity.product product
            WHERE
            hasEntity.pointOfSale = :boxLeftId AND
            pointOfSale.isActive = :active AND
            product.isActive = :active 
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('boxLeftId', $boxLeftId);

        $query = $query->getScalarResult();

        $ids = [];
        foreach ($query as $key => $value){
            $ids[] = isset($value['idIncrement']) ? $value['idIncrement'] : null;
        }

        return $ids;
    }

    public function findBoxleftHasBoxright($boxLeftId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT hasEntity, product
            FROM CoreBundle:PointOfSaleHasProduct hasEntity
            INNER JOIN hasEntity.pointOfSale pointOfSale
            INNER JOIN hasEntity.product product
            WHERE
            pointOfSale.idIncrement = :id AND
            product.isActive = :active 
            ORDER BY product.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $boxLeftId);

        return $query->getResult();
    }

    public function search($q, $maxResults = null, $firstResult = null)
    {
        // TODO: Implement search() method.
    }

    public function findOneById($id)
    {
        // TODO: Implement findOneById() method.
    }

    public function findAll($limit = null, $offset = null)
    {
        // TODO: Implement findAll() method.
    }

}
