<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CoreBundle\Services\Crud\BuildInterface\CrudInterface;

/**
 * CourseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourseRepository extends EntityRepository
{

    public function findAll($limit = null, $offset = null)
    {
        return $this->findBy(['isActive' => 1], ['idIncrement' => 'DESC'], $limit, $offset);
    }

    public function findAllByUserId($userId)
    {

        $em = $this->getEntityManager();
        $dql = "
            SELECT course, userT
            FROM CoreBundle:Course course
            INNER JOIN course.user userT
            WHERE
            userT.id = :user_id AND
            userT.isActive = :active
            ORDER BY course.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('user_id', $userId);

        return $query->getResult();
    }

    public function search($q, $maxResults = null, $firstResult = null)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT course
            FROM CoreBundle:Course course
            WHERE
            (course.idIncrement LIKE :q OR course.name LIKE :q) AND
            course.isActive = :active
            ORDER BY course.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('q', '%' . $q . '%');

        if($maxResults){
            $query->setMaxResults($maxResults);
        }

        if($firstResult){
            $query->setFirstResult($firstResult);
        }

        return $query->getResult();
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT course
            FROM CoreBundle:Course course
            WHERE
            course.idIncrement = :id AND
            course.isActive = :active
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function findBoxleftHasBoxright($boxLeftId, $userProfileSlug)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT course, userT, profile
            FROM CoreBundle:Course course
            INNER JOIN course.user userT
            INNER JOIN userT.profile profile
            WHERE
            course.idIncrement = :id AND
            course.isActive = :status AND
            profile.slug = :user_profile_slug
            ORDER BY course.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('id', $boxLeftId);
        $query->setParameter('user_profile_slug', $userProfileSlug);

        return $query->getResult();
    }

    public function findBoxleftHasBoxright2($boxLeftId, $userProfileSlug)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT course, exam
            FROM CoreBundle:Course course
            INNER JOIN course.exam exam
            WHERE
            course.idIncrement = :id AND
            course.isActive = :status
            ORDER BY course.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('id', $boxLeftId);
//        $query->setParameter('user_profile_slug', $userProfileSlug);
	
//	    echo "POLLO:: <pre>";
//	    print_r($query->getSQL());
//	    exit;

        return $query->getResult();
    }

    public function findAllByUser($user)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT course, userT
            FROM CoreBundle:Course course
            INNER JOIN course.user userT
            WHERE
            userT.id = :userId
            ORDER BY course.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
	
	    $userId = $user->getId();
        $query->setParameter('userId', $userId);

//	    echo "POLLO:: <pre>";
//	    print_r($query->getSQL());
//	    exit;

        return $query->getResult();
    }

}
