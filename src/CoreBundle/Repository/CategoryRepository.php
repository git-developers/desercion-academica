<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CoreBundle\Services\Tree\BuildInterface\TreeInterface;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository implements TreeInterface
{

    public function findAll($limit = null, $offset = null)
    {
        return $this->findBy(['isActive' => 1], ['idIncrement' => 'DESC'], $limit, $offset);
    }

    public function findAllParents()
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT parent
            FROM CoreBundle:Category parent
            WHERE
            parent.isActive = :active AND
            parent.category IS NULL
            ORDER BY parent.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);

        return $query->getResult();
    }

    public function findAllByParent($parent)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT child
            FROM CoreBundle:Category child
            WHERE
            child.isActive = :active AND
            child.category = :parent
            ORDER BY child.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('parent', $parent);

        return $query->getResult();
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT category
            FROM CoreBundle:Category category
            WHERE
            category.idIncrement = :id AND
            category.isActive = :active
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function findAllObjects()
    {
        return $this->createQueryBuilder('a')
            ->where('a.isActive = :active')
            ->orderBy('a.idIncrement', 'DESC')
            ->setParameter('active', true)
            ;

//        ->add('orderBy', 's.sort_order ASC')
//        ->innerJoin('a.languages', 'b')
//        ->addSelect('b')
    }
}




/*
        $map = new ResultSetMapping;
        $map->addScalarResult('parent_id', 'parent_id');
        $map->addScalarResult('parent_name', 'parent_name');
        $map->addScalarResult('pollo', 'pollo');

//        LEFT JOIN category AS child on child.category_id = parent.id_increment
//        ,
//        child.*

        $sqlQuery = "
                    SELECT
                    parent.id_increment AS parent_id,
                    parent.name AS parent_name,
                    (SELECT child.id_increment FROM category AS child WHERE child.category_id = parent.id_increment LIMIT 1) AS pollo
                    FROM category AS parent
                    WHERE
                    parent.category_id IS NULL AND
                    parent.is_active = :active
                    ORDER BY parent.id_increment DESC
                    LIMIT 1000
                    ";

        $em = $this->getEntityManager();
        $query = $em->createNativeQuery($sqlQuery, $map);
        $query->setParameter('active', true);
        //$query->useResultCache(true, 300, 'testcache');

        return $query->getResult();
 *
 *

        $em = $this->getEntityManager();
        $dql = "
            SELECT parent
            FROM CoreBundle:Category parent
            WHERE
            parent.isActive = :active AND
            parent.category IS NULL
            ORDER BY parent.idIncrement DESC
            ";

//        $dql = "
//            SELECT parent, child
//            FROM CoreBundle:Category parent
//            LEFT JOIN CoreBundle:Category AS child WITH child.category = parent.idIncrement
//            WHERE
//            parent.isActive = :active AND
//            child.isActive = :active AND
//            parent.category IS NULL
//            ORDER BY parent.idIncrement DESC
//            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);

//
//        $sql = $query->getSQL();
//        print_r($sql);
//        exit;


        return $query->getResult();


//        return $this->findBy(['isActive' => 1], ['idIncrement' => 'DESC']);
 */