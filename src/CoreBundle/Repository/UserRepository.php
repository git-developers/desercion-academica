<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use CoreBundle\Services\Crud\BuildInterface\CrudInterface;
use CoreBundle\Services\BoxOneToMany\BuildInterface\BoxOneToManyInterface;
use CoreBundle\Services\BoxOneToManyGroup\BuildInterface\BoxOneToManyGroupInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function loadUserByUsername($username)
    {
        return $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findAllByCourseId($cursoId, $userProfileSlug)
    {

        $em = $this->getEntityManager();
        $dql = "
            SELECT course, userT, profile
            FROM CoreBundle:User userT
            INNER JOIN userT.profile profile
            INNER JOIN userT.course course
            WHERE
            course.idIncrement = :curso_id AND
            course.isActive = :active AND 
            profile.slug = :user_profile_slug 
            ORDER BY course.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('curso_id', $cursoId);
        $query->setParameter('user_profile_slug', $userProfileSlug);

        return $query->getResult();
    }

    public function findBoxleftHasBoxright($boxLeftId)
    {

        $em = $this->getEntityManager();
        $dql = "
            SELECT course, userTianos
            FROM CoreBundle:User userTianos
            INNER JOIN userTianos.course course
            WHERE
            userTianos.id = :id AND
            userTianos.isActive = :status
            ORDER BY course.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('id', $boxLeftId);

        return $query->getResult();
    }

    public function search($q, $maxResults = null, $firstResult = null, $userProfileSlug)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT userTianos
            FROM CoreBundle:User userTianos
            INNER JOIN userTianos.profile profile
            WHERE
            (userTianos.id LIKE :q OR userTianos.name LIKE :q OR userTianos.lastName LIKE :q) AND
            userTianos.isActive = :active AND
            profile.slug = :user_profile_slug 
            ORDER BY userTianos.id DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('q', '%' . $q . '%');
        $query->setParameter('user_profile_slug', $userProfileSlug);

        if($maxResults){
            $query->setMaxResults($maxResults);
        }

        if($firstResult){
            $query->setFirstResult($firstResult);
        }

        return $query->getResult();
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT userTianos
            FROM CoreBundle:User userTianos
            WHERE
            userTianos.id = :id AND
            userTianos.isActive = :active
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function findOneByProfile($id, $profile)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT userTianos, profile
            FROM CoreBundle:User userTianos
            INNER JOIN userTianos.profile profile
            WHERE
            userTianos.id = :id AND
            profile.name = :profile AND
            userTianos.isActive = :active
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $id);
        $query->setParameter('profile', $profile);

        return $query->getOneOrNullResult();
    }

    public function findAllByProfile($profile)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT userTianos, profile
            FROM CoreBundle:User userTianos
            INNER JOIN user.profile profile
            INNER JOIN profile.permission permission
            WHERE
            permission.alias = :profile AND
            userTianos.isActive = :active
            ORDER BY userTianos.id DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('profile', $profile);

        return $query->getResult();
    }

    public function findAllByRole($role)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT userTianos, profile
            FROM CoreBundle:User userTianos
            INNER JOIN user.profile profile
            INNER JOIN profile.permission permission
            WHERE
            permission.groupPermission = :role AND
            user.isActive = :active
            ORDER BY userTianos.id DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('role', str_replace('ROLE_','',$role));

        return $query->getResult();
    }

    public function findAll($limit = null, $offset = null)
    {
        return $this->findBy(['isActive' => 1], ['id' => 'DESC'], $limit, $offset);
    }

    public function findAllBoxOneToMany($limit = null, $userProfileSlug)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT userTianos, profile
            FROM CoreBundle:User userTianos
            INNER JOIN userTianos.profile profile
            WHERE
            profile.slug = :user_profile_slug AND
            userTianos.isActive = :active
            ORDER BY userTianos.id DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('user_profile_slug', $userProfileSlug);

        return $query->getResult();
    }

    public function findAllByParent($parent)
    {
        // TODO: Implement findAllByParent() method.
    }

    public function findAllByBoxLeftValue($boxLeftId)
    {
        // TODO: Implement findAllByBoxLeftValue() method.
    }

    public function findAllByBoxLeftId($boxLeftId)
    {
        // TODO: Implement findAllByBoxLeftId() method.
    }

}
