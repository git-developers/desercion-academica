<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CoreBundle\Services\Crud\BuildInterface\CrudInterface;
use CoreBundle\Services\BoxOneToMany\BuildInterface\BoxOneToManyInterface;
use CoreBundle\Services\Tree\BuildInterface\TreeInterface;

/**
 * PointOfSaleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointOfSaleRepository extends EntityRepository implements CrudInterface, BoxOneToManyInterface, TreeInterface
{

    public function findAllObjects()
    {
        return $this->createQueryBuilder('a')
            ->where('a.isActive = :active')
            ->orderBy('a.idIncrement', 'DESC')
            ->setParameter('active', true)
            ;
    }

    public function findAll($limit = null, $offset = null)
    {
        return $this->findBy(['isActive' => 1], ['idIncrement' => 'DESC'], $limit, $offset);
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT pointOfSale
            FROM CoreBundle:PointOfSale pointOfSale
            WHERE
            pointOfSale.idIncrement = :id AND
            pointOfSale.isActive = :active
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function search($q, $maxResults = null, $firstResult = null)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT pointOfSale
            FROM CoreBundle:PointOfSale pointOfSale
            WHERE
            (pointOfSale.idIncrement LIKE :q OR pointOfSale.name LIKE :q OR pointOfSale.code LIKE :q) AND
            pointOfSale.isActive = :active
            ORDER BY pointOfSale.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('q', '%' . $q . '%');

        if($maxResults){
            $query->setMaxResults($maxResults);
        }

        if($firstResult){
            $query->setFirstResult($firstResult);
        }

        return $query->getResult();
    }

    public function findAllParents()
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT parent
            FROM CoreBundle:PointOfSale parent
            WHERE
            parent.isActive = :active AND
            parent.pointOfSale IS NULL
            ORDER BY parent.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);

        return $query->getResult();
    }

    public function findAllByParent($parent)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT child
            FROM CoreBundle:PointOfSale child
            WHERE
            child.isActive = :active AND
            child.pointOfSale = :parent
            ORDER BY child.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('active', 1);
        $query->setParameter('parent', $parent);

        return $query->getResult();
    }

    public function findBoxleftHasBoxright($boxLeftId)
    {

    }

    public function findAllByBoxLeftValue($boxLeftId)
    {
        // TODO: Implement findAllByBoxLeftValue() method.
    }

}
